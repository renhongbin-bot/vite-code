{"version":3,"sources":["../src/generator.ts","../src/utils.ts","../src/constants.ts","../src/fs/config.ts","../src/fs/glob.ts","../src/fs/log.ts","../src/index.ts"],"sourcesContent":["import type { Alias, Options, Path } from './types';\nimport { normalizePath } from 'vite';\nimport { logger, split, toArray, toCamelCase, toRelative } from './utils';\nimport { writeLog, writeConfig } from './fs';\n\nimport chokidar from 'chokidar';\nimport { resolve } from 'path';\nimport { config } from \"./constants\";\nimport { getDirectories } from './fs';\n\n/**\n * Reads the Projectpath and returns Vite Aliases\n * @param options\n * @returns Record<string, string>\n */\n\nexport class Generator {\n\treadonly options: Options;\n\treadonly fullPath: string;\n\n\tpublic aliases: Alias[] = [];\n\tpublic directories = new Set<string>();\n\tpublic paths: Path = {};\n\n\tconstructor(public readonly servermode: string, options?: Partial<Options>) {\n\t\tthis.options = Object.assign({}, config, options);\n\n\t\tthis.fullPath = normalizePath(resolve(this.options.root, this.options.dir)); // needed for absolute paths in watcher\n\n\t\t// only watch on dev not on build\n\t\tif (servermode === 'serve') {\n\t\t\tthis.observe();\n\t\t}\n\t}\n\n\t/**\n\t * Add Alias\n\t * @param path\n\t */\n\n\taddAlias(path: string | string[]) {\n\t\ttoArray(path).forEach((p) => {\n\t\t\tconst correctedPath = normalizePath(p);\n\t\t\tconst folders = split(correctedPath.replace(this.fullPath, this.options.dir), '/').filter(Boolean);\n\t\t\tconst lastDir = folders.slice(-1)[0];\n\t\t\tlet key = `${this.options.prefix}${lastDir}`;\n\n\t\t\tconst uniqueFolders = [...new Set(folders)] as string[];\n\t\t\tthis.checkForDuplicates(correctedPath, folders, uniqueFolders);\n\n\t\t\tif(this.aliases.some((a) => a.find === key)) {\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'There are duplicate Aliases generated, either fix the folderstructure or enable adjustDuplicates.',\n\t\t\t\t);\n\n\t\t\t\tif (this.options.adjustDuplicates && this.options.depth > 1) {\n\t\t\t\t\tconst name = folders.filter((f) => !split(normalizePath(this.options.dir), '/').includes(f)).join('-');\n\t\t\t\t\tkey = `${this.options.prefix}${toCamelCase(name)}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(lastDir === this.options.dir && this.options.createGlobalAlias) {\n\t\t\t\tkey = `${this.options.prefix}`;\n\t\t\t}\n\n\t\t\tthis.directories.add(p);\n\t\t\tthis.aliases.push({\n\t\t\t\tfind: `${key}`,\n\t\t\t\treplacement: `${p}`\n\t\t\t});\n\n\t\t\tconst configPath = this.options.useAbsolute ? correctedPath : toRelative(correctedPath, this.options.dir);\n\n\t\t\tif(this.options.useIndexes) {\n\t\t\t\tthis.paths[key] = [configPath];\n\t\t\t} else {\n\t\t\t\tthis.paths[`${key}/*`] = [`${configPath}/*`];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Remove Alias\n\t * @param path\n\t */\n\n\tremoveAlias(path: string | string[]) {\n\t\ttoArray(path).forEach((p) => {\n\t\t\tconst correctedPath = normalizePath(p);\n\n\t\t\tif(this.directories.has(correctedPath)) {\n\t\t\t\tthis.directories.delete(correctedPath);\n\t\t\t\tthis.aliases = this.aliases.filter((a) => a.replacement != correctedPath);\n\t\t\t\tthis.paths = Object.fromEntries(\n\t\t\t\t\tObject.entries(this.paths).filter(\n\t\t\t\t\t\t(configPath) => configPath[1][0].slice(0, -2) != (\n\t\t\t\t\t\t\tthis.options.useIndexes ? correctedPath : `${correctedPath}/*`\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Check for duplicates before adding them as aliases\n\t * @param initialPath\n\t * @param folders\n\t * @param uniqueFolders\n\t */\n\n\tcheckForDuplicates(initialPath: string, folders: string[], uniqueFolders: string[]) {\n\t\tif (folders.length !== uniqueFolders.length) {\n\t\t\tconst duplicateFolders = [...folders].sort().filter((f, i, self) => {\n\t\t\t\tif (self[i + 1] === self[i]) {\n\t\t\t\t\treturn f;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlogger.warn(`Path: '${initialPath}' contains multiple folders with same name: ${duplicateFolders.toString()}.`);\n\t\t}\n\t}\n\n\t/**\n\t * Glob directories\n\t * writes Logfile\n\t * writes IDE Config\n\t */\n\n\tprivate searched: boolean = false;\n\n\tasync init() {\n\t\tif (this.searched) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait getDirectories(this);\n\n\t\t// add global alias if allowed\n\t\tif (this.options.createGlobalAlias) {\n\t\t\tthis.addAlias(this.fullPath);\n\t\t}\n\n\t\t// start alias logger if allowed\n\t\twriteLog(this);\n\n\t\t// write js/ts config if allowed\n\t\twriteConfig(this);\n\n\t\tthis.searched = true;\n\t}\n\n\t/**\n\t * Watch for directory changes\n\t */\n\n\tobserve() {\n\t\tconst watcher = chokidar.watch(this.fullPath, { ignoreInitial: true, depth: this.options.depth });\n\n\t\twatcher\n\t\t\t.on('addDir', (path) => {\n\t\t\t\tthis.addAlias(path);\n\t\t\t\twriteLog(this, 'add');\n\t\t\t\twriteConfig(this, 'add');\n\t\t\t\tlogger.info(`Watcher added new Path: ${path}`);\n\t\t\t})\n\t\t\t.on('unlinkDir', (path) => {\n\t\t\t\tthis.removeAlias(path);\n\t\t\t\twriteLog(this, 'remove');\n\t\t\t\twriteConfig(this, 'remove');\n\t\t\t\tlogger.info(`Watcher removed Path: ${path}`);\n\t\t\t});\n\t}\n}\n","import consola from 'consola';\nimport fs from 'node:fs/promises';\nimport { normalizePath } from 'vite';\nimport { MODULE_NAME } from './constants';\nimport type { Process } from './types';\nimport { parse, stringify } from 'comment-json';\n\n/**\n * Split String on Seperator into Array\n * @param string\n * @param seperator\n */\n\nexport function split(string: string, seperator: string): string[] {\n\treturn string.split(seperator);\n}\n\n/**\n * Turns a Value into Array\n * @param string\n * @param seperator\n */\n\nexport function toArray<T>(value: T | T[]): T[] {\n\tif (Array.isArray(value)) {\n\t\treturn value;\n\t} else {\n\t\treturn [value];\n\t}\n}\n\n/**\n * Turns a absolute Path into an Relative Path\n * @param string\n * @param seperator\n */\n\nexport function toRelative(path: string, dir: string): string {\n\tlet folders = split(normalizePath(path), '/');\n\tfolders = folders.slice(\n\t\tfolders.findIndex((f) => f === dir),\n\t\tfolders.length,\n\t);\n\treturn normalizePath(`./${folders.join('/')}`);\n}\n\n/**\n * Turns any String into Camelcased String\n * @param string\n */\n\nexport function toCamelCase(string: string): string {\n\treturn string.trim().replace(/[-_\\s]+(.)?/g, (_, c) => (c ? c.toUpperCase() : ''));\n}\n\n/**\n * Check if Value is Empty\n * supports: Array, Object, String\n * @param value\n */\n\nexport function isEmpty(value: any) {\n\tif (value === null || value === undefined || value === '{}' || value === '' || JSON.stringify(value) === '{}') {\n\t\treturn true;\n\t}\n\n\tif ((Array.isArray(value) && Object.keys(value).length <= 0) || (Array.isArray(value) && value.length === 0)) {\n\t\treturn true;\n\t}\n\n\t// if (Reflect.ownKeys(value).length === 0 && value.constructor === Object) {\n\t// \treturn true;\n\t// }\n\n\treturn false;\n}\n\n/**\n * Simple Info/Warn/Error Consola Instance\n */\n\nexport const logger = consola.create({ defaults: { message: `[${MODULE_NAME}] -`} });\nexport function abort(message: any) {\n\tthrow logger.error(new Error(message));\n}\n\n/**\n * Reads a JSON File\n */\n\nexport async function readJSON(path: string) {\n\ttry {\n\t\tconst file = (await fs.readFile(path, 'utf-8')).toString();\n\t\tlogger.success(`Config: ${path} successfully read!`);\n\t\treturn parse(file);\n\t} catch (error) {\n\t\tlogger.error(`File: ${path} was not found!`);\n\t}\n}\n\n/**\n * Writes a JSON File\n */\n\nexport async function writeJSON(path: string, data: any, process: Process) {\n\tconst name = path.replace(/^.*[\\\\\\/]/, '');\n\tconst state = process === 'add' || process === 'default' ? 'created' : 'updated';\n\n\ttry {\n\t\tawait fs.writeFile(path, stringify(data, null, 4));\n\t\tlogger.success(`File: ${name} successfully ${state}`);\n\t} catch (error) {\n\t\tlogger.error(`File: ${name} could not be ${state}.`);\n\t\tabort(error);\n\t}\n}\n","import type { Options } from './types';\n\nexport const MODULE_NAME = 'vite-aliases';\n\nexport const config: Required<Options> = {\n\tdir: 'src',\n\n\tprefix: '@',\n\tdeep: true,\n\tdepth: 1,\n\n\tcreateGlobalAlias: true,\n\tcreateLog: false,\n\tlogPath: 'src/logs',\n\tadjustDuplicates: false,\n\n\tuseAbsolute: false,\n\tuseConfig: false,\n\tuseIndexes: false,\n\tuseTypescript: false,\n\n\troot: process.cwd(),\n};\n\nexport const IDEConfig = {\n\tcompilerOptions: {\n\t\tbaseUrl: '.',\n\t\tpaths: {},\n\t},\n};\n","import { existsSync } from 'node:fs';\nimport { abort, readJSON, writeJSON } from '../utils';\n\nimport { IDEConfig } from '../constants';\nimport type { Generator } from '../generator';\nimport type { Process } from '../types';\nimport { normalizePath } from 'vite';\n\n/**\n * Creates a JS or TS Configfile\n */\n\nexport async function writeConfig(gen: Generator, process: Process = 'default') {\n\tconst { root, dir, useTypescript, useConfig } = gen.options;\n\n\tif (!useConfig) {\n\t\treturn;\n\t}\n\n\tconst name = useTypescript ? 'tsconfig' : 'jsconfig';\n\tconst file = normalizePath(`${root}/${name}.json`);\n\n\ttry {\n\t\tlet json: any = await readJSON(file);\n\n\t\tif(!json) {\n\t\t\tIDEConfig.compilerOptions.paths = { ...gen.paths };\n\t\t\tjson = Object.assign({}, IDEConfig);\n\t\t}\n\n\t\tif(!json.compilerOptions) {\n\t\t\tjson.compilerOptions = {\n\t\t\t\tpaths: { ...gen.paths },\n\t\t\t};\n\t\t}\n\n\t\tlet paths = json.compilerOptions.paths || {};\n\n\t\tif(process === 'remove') {\n\t\t\tpaths = Object.fromEntries(\n\t\t\t\tObject.entries(paths).filter((p: any) => {\n\t\t\t\t\tif (Object.values(gen.paths).flat().includes(p[1][0]) && p[1][0].includes(dir)) {\n\t\t\t\t\t\treturn p;\n\t\t\t\t\t} else if (!p[1][0].includes(dir)) {\n\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tjson.compilerOptions.paths = { ...paths, ...gen.paths };\n\t\tawait writeJSON(file, json, process);\n\t} catch (error) {\n\t\tabort(`Cannot write Config: ${file}.`);\n\t}\n}\n","import fg from 'fast-glob';\nimport type { Generator } from '../generator';\nimport { logger } from '../utils';\n\n/**\n * Return all folders from the project directory\n * @param options\n */\n\nexport async function getDirectories(gen: Generator) {\n\tconst { dir, root, deep, depth } = gen.options;\n\n\tconst directories = await fg.sync(deep ? `${dir}/**/*` : `${dir}/*`, {\n\t\tignore: ['node_modules'],\n\t\tonlyDirectories: true,\n\t\tcwd: root,\n\t\tdeep: depth,\n\t\tabsolute: true,\n\t});\n\n\tif (!directories.length) {\n\t\tlogger.error(new Error('No Directories could be found!'));\n\t}\n\n\tgen.addAlias(directories);\n}\n","import { existsSync } from 'node:fs';\nimport { mkdir } from 'node:fs/promises';\nimport { normalizePath } from 'vite';\n\nimport { MODULE_NAME } from '../constants';\nimport type { Generator } from '../generator';\nimport type { Process } from '../types';\nimport { abort, writeJSON } from '../utils';\n\n\n\n/**\n * Creates a Logfile\n * If needed it will also create a Logfolder\n */\n\nexport async function writeLog(gen: Generator, process: Process = 'normal') {\n\tconst { dir, createLog, logPath } = gen.options;\n\n\tif (!createLog) {\n\t\treturn;\n\t}\n\n\tconst folder = normalizePath(logPath);\n\tconst file = normalizePath(`${folder}/${MODULE_NAME}.json`);\n\tconst data = gen.aliases;\n\n\ttry {\n\t\tif (!existsSync(folder)) {\n\t\t\tawait mkdir(folder, { recursive: true });\n\t\t}\n\t\tawait writeJSON(file, data, process);\n\t} catch (error) {\n\t\tabort(`Cannot create Logfolder ${folder}.`);\n\t}\n}\n","import type { PluginOption } from 'vite';\nimport { Generator } from './generator';\nimport type { Options } from './types';\nimport { toArray } from './utils';\n\nexport function ViteAliases(options: Partial<Options> = {}): PluginOption {\n\tlet gen: Generator;\n\n\treturn {\n\t\tname: 'vite-aliases',\n\t\tenforce: 'pre',\n\t\tconfig(config, { command }) {\n\t\t\tgen = new Generator(command, options);\n\t\t\tgen.init();\n\n\t\t\tconfig.resolve = {\n\t\t\t\talias: config.resolve?.alias ? [...toArray(config.resolve.alias as any), ...gen.aliases] : gen.aliases,\n\t\t\t};\n\t\t},\n\t};\n};\n"],"mappings":"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","names":["normalizePath","process","normalizePath","process","normalizePath","process","normalizePath","normalizePath","config"]}